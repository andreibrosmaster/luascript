-- Parameters
local speed_min = 1.6
local take_off_distance = 20
local iter_average_max = 1000
local iter_correction_max = 1000
local distance_min = 20
local distance_max = 60
local variation = 0.1  -- Define the variation value

-- Variables
local correction = "No"
local throttle_ini = 0
local throttle = 0
local iter_average = 0
local total_distance = 0
local iter_correction = 0

-- Function to reset the correction state
local function resetCorrection()
    correction = "No"
    throttle = throttle_ini
    iter_correction = 0
end

-- Main loop
while true do
    -- Get the rangefinder sensor data
    local sensor_data = rangefinder:read(0)
    
    -- Check if distance data is valid
    if sensor_data and sensor_data.distance then
        local instant_distance = sensor_data.distance

        -- Check conditions (Flight mode not manual, speed > speed_min, instant_distance > take_off_distance)
        local flight_mode = vehicle:get_mode()
        local speed = vehicle:get_ground_speed()
        
        if flight_mode ~= "MANUAL" and speed > speed_min and instant_distance > take_off_distance then
            if correction == "No" then -- no correction in progress
                iter_average = iter_average + 1
                total_distance = total_distance + instant_distance

                if iter_average == iter_average_max then -- end of cycle
                    local distance_average = total_distance / iter_average_max -- calculate average distance during the cycle
                    iter_average = 0

                    if distance_average <= distance_min then
                        correction = "Up"
                        throttle_ini = throttle
                        throttle = throttle + (throttle_ini * variation) -- Increase the throttle by a percentage

                    elseif distance_average >= distance_max then
                        correction = "Down"
                        throttle_ini = throttle
                        throttle = throttle - (throttle_ini * variation) -- Decrease the throttle by a percentage
                    end

                    print("End of cycle. Correction:", correction, "Average distance:", distance_average, "Speed:", speed, "Throttle:", throttle)
                end
            else -- correction in progress
                print("Correction", correction, "in progress. Distance:", instant_distance, "Speed:", speed)
                iter_correction = iter_correction + 1

                if instant_distance > distance_min and instant_distance < distance_max then
                    resetCorrection()
                    print("Correction", correction, "done. Distance:", instant_distance, "Speed:", speed, "Throttle:", throttle)
                end

                if iter_correction == iter_correction_max then
                    resetCorrection()
                    print("Correction", correction, "NOT done. Distance:", instant_distance, "Speed:", speed, "Throttle:", throttle)
                end
            end
        else
            resetCorrection() -- Reset correction if conditions are not met
        end
    else
        resetCorrection() -- Reset correction if sensor data is invalid
    end
end
